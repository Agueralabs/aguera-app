diff --git a/dist/tools/trade.js b/dist/tools/trade.js
index 280aa7564613238857477f791f7f7522a8faca83..47ad1ffee7884cb6a2e19e00d410fb2677ad8e2c 100644
--- a/dist/tools/trade.js
+++ b/dist/tools/trade.js
@@ -29,7 +29,7 @@ async function trade(agent, outputMint, inputAmount, inputMint = constants_1.TOK
             `&amount=${scaledAmount}` +
             `&slippageBps=${slippageBps}` +
             `&onlyDirectRoutes=true` +
-            `&maxAccounts=20` +
+            `&maxAccounts=64` +
             `${agent.config.JUPITER_FEE_BPS ? `&platformFeeBps=${agent.config.JUPITER_FEE_BPS}` : ""}`)).json();
         // Get serialized transaction
         let feeAccount;
diff --git a/dist/tools/transfer.js b/dist/tools/transfer.js
index c05ec05fb3144d6ec6fcbedfd77946ad052f2ce7..488866aaef9658fd01f42e75ff8b64f7aae44147 100644
--- a/dist/tools/transfer.js
+++ b/dist/tools/transfer.js
@@ -4,6 +4,9 @@ exports.transfer = transfer;
 const web3_js_1 = require("@solana/web3.js");
 const web3_js_2 = require("@solana/web3.js");
 const spl_token_1 = require("@solana/spl-token");
+const { Helius } = require("helius-sdk");
+
+const helius = new Helius(process.env.HELIUS_API_KEY);
 /**
  * Transfer SOL or SPL tokens to a recipient
  * @param agent SolanaAgentKit instance
@@ -22,17 +25,22 @@ async function transfer(agent, to, amount, mint) {
                 toPubkey: to,
                 lamports: amount * web3_js_2.LAMPORTS_PER_SOL,
             }));
-            tx = await agent.connection.sendTransaction(transaction, [agent.wallet]);
+            tx = await helius.rpc.sendSmartTransaction(transaction.instructions, [agent.wallet]);
         }
         else {
             // Transfer SPL token
             const fromAta = await (0, spl_token_1.getAssociatedTokenAddress)(mint, agent.wallet_address);
-            const toAta = await (0, spl_token_1.getAssociatedTokenAddress)(mint, to);
+            const toAta = await spl_token_1.getOrCreateAssociatedTokenAccount(
+                agent.connection,
+                agent.wallet,
+                mint,
+                to
+            );
             // Get mint info to determine decimals
             const mintInfo = await (0, spl_token_1.getMint)(agent.connection, mint);
             const adjustedAmount = amount * Math.pow(10, mintInfo.decimals);
-            const transaction = new web3_js_1.Transaction().add((0, spl_token_1.createTransferInstruction)(fromAta, toAta, agent.wallet_address, adjustedAmount));
-            tx = await agent.connection.sendTransaction(transaction, [agent.wallet]);
+            const transaction = new web3_js_1.Transaction().add((0, spl_token_1.createTransferInstruction)(fromAta, toAta.address, agent.wallet_address, adjustedAmount));
+            tx = await helius.rpc.sendSmartTransaction(transaction.instructions, [agent.wallet]);
         }
         return tx;
     }
